# -*- coding: utf-8 -*-
"""PosTagSHqipTrankit01gushtipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ynNzhd-FWMtFXwBBlXc35GB0cw8E8rXo
"""

pip install trankit



import trankit

# initialize a trainer for the task
trainer = trankit.TPipeline(
    training_config={
    'category': 'customized', # pipeline category
    'task': 'posdep', # task name
    'save_dir': './save_dir', # directory for saving trained model
    'train_conllu_fpath': './albanian-all-test-new.conllu',
    'dev_conllu_fpath': './albanian-all-devel-new.conllu' # annotations file in CONLLU format for development
    }
)

# start training
trainer.train()

import trankit

trankit.verify_customized_pipeline(
    category='customized', # pipeline category
    save_dir='./save_dir', # directory used for saving models in previous steps
    embedding_name='xlm-roberta-base' # embedding version that we use for training our customized pipeline, by default, it is `xlm-roberta-base`
)

import trankit

trankit.download_missing_files(
	category='customized',
	save_dir='./save_dir',
	embedding_name='xlm-roberta-base',
	language='english'
)

from trankit import Pipeline
p = Pipeline(lang='customized', cache_dir='./save_dir')

from trankit import Pipeline

# Initialize the pipeline
pen = Pipeline(lang='customized', cache_dir='./save_dir')

# Function to load a document from a file
def load_document(file_path):
    with open(file_path, 'r', encoding='utf-8') as file:
        document = file.read()
    return document

# Function to save processed output to a file
def save_output(output, file_path):
    with open(file_path, 'w', encoding='utf-8') as file:
        file.write(output)

# Path to your input and output files
input_file_path = '/content/Licences_des_entreprises_ferroviaireAL.txt'
output_file_path = '/content/Licences_des_entreprises_ferroviaireAL.txt'

# Load the document
document = load_document(input_file_path)

# Process the document using the pipeline
processed_document = p(document)

# Convert the processed document to a string format suitable for saving
# Here we assume that the pipeline output is in a format that can be converted to a string directly.
# You might need to format it depending on the exact output structure.
processed_output_str = str(processed_document)

# Save the processed output to a file
save_output(processed_output_str, output_file_path)

print(f'Processed document saved to {output_file_path}')

